---
# Source: kubeapps/charts/dex/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubeapps-stack-dex
  labels:
    helm.sh/chart: dex-0.15.3
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/version: "2.37.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: kubeapps/charts/kubeapps/templates/apprepository/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubeapps-stack-internal-apprepository-controller
  namespace: "default"
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    helm.sh/chart: kubeapps-13.1.1
    app.kubernetes.io/component: apprepository
automountServiceAccountToken: true
---
# Source: kubeapps/charts/kubeapps/templates/kubeappsapis/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubeapps-stack-internal-kubeappsapis
  namespace: "default"
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    helm.sh/chart: kubeapps-13.1.1
    app.kubernetes.io/component: kubeappsapis
automountServiceAccountToken: true
---
# Source: kubeapps/charts/pinniped/templates/concierge/impersonation-proxy-service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubeapps-stack-pinniped-concierge-impersonation-proxy
  namespace: "default"
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pinniped
    helm.sh/chart: pinniped-1.3.2
    app.kubernetes.io/part-of: pinniped
    app.kubernetes.io/component: concierge
automountServiceAccountToken: true
secrets:
  - name: kubeapps-stack-pinniped-concierge-impersonation-proxy
---
# Source: kubeapps/charts/pinniped/templates/concierge/kube-cert-agent-service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubeapps-stack-pinniped-concierge-kube-cert-agent-server
  namespace: "default"
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pinniped
    helm.sh/chart: pinniped-1.3.2
    app.kubernetes.io/part-of: pinniped
    app.kubernetes.io/component: concierge
automountServiceAccountToken: true
---
# Source: kubeapps/charts/pinniped/templates/concierge/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubeapps-stack-pinniped-concierge
  namespace: "default"
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pinniped
    helm.sh/chart: pinniped-1.3.2
    app.kubernetes.io/part-of: pinniped
    app.kubernetes.io/component: concierge
automountServiceAccountToken: true
---
# Source: kubeapps/charts/dex/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: kubeapps-stack-dex
  labels:
    helm.sh/chart: dex-0.15.3
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/version: "2.37.0"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  config.yaml: "Y29ubmVjdG9yczoKLSBjb25maWc6CiAgICBjbGllbnRJRDogPHBhdGg6L2RldnNlY29wcy9kYXRhL2FwcHMva3ViZWFwcHMvZGV2c2Vjb3BzLXRlc3RpbmcjZGV4R2l0SHViQ2xpZW50SWQ+CiAgICBjbGllbnRTZWNyZXQ6IDxwYXRoOi9kZXZzZWNvcHMvZGF0YS9hcHBzL2t1YmVhcHBzL2RldnNlY29wcy10ZXN0aW5nI2RleEdpdEh1YkNsaWVudFNlY3JldD4KICAgIGxvYWRBbGxHcm91cHM6IGZhbHNlCiAgICBvcmdzOgogICAgLSBuYW1lOiBjYXRlbmF4LW5nCiAgICByZWRpcmVjdFVSSTogaHR0cHM6Ly9kZXgta3ViZWFwcHMuZGV2c2Vjb3BzLXRlc3RpbmcuZGVtby5jYXRlbmEteC5uZXQvY2FsbGJhY2sKICAgIHRlYW1OYW1lRmllbGQ6IHNsdWcKICAgIHVzZUxvZ2luQXNJRDogZmFsc2UKICBpZDogZ2l0aHViCiAgbmFtZTogR2l0SHViCiAgdHlwZTogZ2l0aHViCmlzc3VlcjogaHR0cHM6Ly9kZXgta3ViZWFwcHMuZGV2c2Vjb3BzLXRlc3RpbmcuZGVtby5jYXRlbmEteC5uZXQKc3RhdGljQ2xpZW50czoKLSBpZDogPHBhdGg6L2RldnNlY29wcy9kYXRhL2FwcHMva3ViZWFwcHMvZGV2c2Vjb3BzLXRlc3Rpbmcja3ViZWFwcHNEZXhDbGllbnRJZD4KICBuYW1lOiBLdWJlYXBwcwogIHJlZGlyZWN0VVJJczoKICAtIGh0dHBzOi8va3ViZWFwcHMuZGV2c2Vjb3BzLXRlc3RpbmcuZGVtby5jYXRlbmEteC5uZXQvb2F1dGgyL2NhbGxiYWNrCiAgc2VjcmV0OiA8cGF0aDovZGV2c2Vjb3BzL2RhdGEvYXBwcy9rdWJlYXBwcy9kZXZzZWNvcHMtdGVzdGluZyNrdWJlYXBwc0RleENsaWVudFNlY3JldD4Kc3RvcmFnZToKICB0eXBlOiBtZW1vcnk="
---
# Source: kubeapps/charts/kubeapps/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: kubeapps-stack-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.10.0
type: Opaque
data:
  postgres-password: "dFptaE91aTNBTA=="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: kubeapps/charts/kubeapps/templates/frontend/oauth2-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: kubeapps-stack-oauth2
  namespace: "default"
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    helm.sh/chart: kubeapps-13.1.1
    app.kubernetes.io/component: frontend
data:
  clientID: PHBhdGg6L2RldnNlY29wcy9kYXRhL2FwcHMva3ViZWFwcHMvZGV2c2Vjb3BzLXRlc3Rpbmcja3ViZWFwcHNEZXhDbGllbnRJZD4=
  clientSecret: PHBhdGg6L2RldnNlY29wcy9kYXRhL2FwcHMva3ViZWFwcHMvZGV2c2Vjb3BzLXRlc3Rpbmcja3ViZWFwcHNEZXhDbGllbnRTZWNyZXQ+
  cookieSecret: PHBhdGg6L2RldnNlY29wcy9kYXRhL2FwcHMva3ViZWFwcHMvZGV2c2Vjb3BzLXRlc3Rpbmcja3ViZWFwcHNDb29raWVTZWNyZXQ+
---
# Source: kubeapps/charts/pinniped/templates/concierge/token-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: kubeapps-stack-pinniped-concierge-impersonation-proxy
  namespace: "default"
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pinniped
    helm.sh/chart: pinniped-1.3.2
    app.kubernetes.io/part-of: pinniped
    app.kubernetes.io/component: concierge
  annotations:
    kubernetes.io/service-account.name: kubeapps-stack-pinniped-concierge-impersonation-proxy
type: kubernetes.io/service-account-token
---
# Source: kubeapps/charts/kubeapps/templates/dashboard/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kubeapps-stack-internal-dashboard-config
  namespace: "default"
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    helm.sh/chart: kubeapps-13.1.1
    app.kubernetes.io/component: dashboard
data:
  vhost.conf: |-
    server {
      listen 8080;
      large_client_header_buffers 4 32k;
      server_name _;

      gzip on;
      gzip_static  on;

      location /custom_style.css {
        root /app/custom-css/;
      }

      location /custom_locale.json {
        root /app/custom-locale/;
      }

      location /custom_components.js {
        root /app/custom-components/;
      }

      location / {
        # Redirects are required to be relative otherwise the internal hostname will be exposed
        absolute_redirect off;

        # Trailing / is required in the path for the React app to be loaded correctly
        # The rewrite rule adds a trailing "/" to any path that does not contain "." neither "/".
        # i.e kubeapps => kubeapps/
        rewrite ^([^.]*[^/])$ $1/ permanent;

        # Support for ingress prefixes maintaining compatibility with the default /
        # 1 - Exactly two fragment URLs for files existing inside of the public/ dir
        # i.e /[prefix]/config.json => /config.json
        rewrite ^/[^/]+/([^/]+)$ /$1 break;

        # 2 - Any static files bundled by webpack referenced by 3 or more URL segments
        # i.e /[prefix]/static/main.js => static/main.js
        rewrite ^/[^/]+/static/(.*) /static/$1 break;

        try_files $uri /index.html;
      }
    }
  custom_style.css: |-
    
  custom_components.js: |-
    
  custom_locale.json: |-
    ""
  config.json: |-
    {
      "kubeappsCluster": "default",
      "kubeappsNamespace": "default",
      "helmGlobalNamespace": "default",
      "carvelGlobalNamespace": "kapp-controller-packaging-global",
      "appVersion": "v2.8.0",
      "authProxyEnabled": true,
      "oauthLoginURI": "/oauth2/start",
      "oauthLogoutURI": "/oauth2/sign_out",
      "authProxySkipLoginPage": false,
      "featureFlags": {"apiOnly":{"enabled":false,"grpc":{"annotations":{"nginx.ingress.kubernetes.io/backend-protocol":"GRPC"}}},"operators":false,"schemaEditor":{"enabled":false}},
      "clusters": ["default"],
      "theme": "",
      "remoteComponentsUrl": "",
      "customAppViews": [],
      "skipAvailablePackageDetails": false,
      "createNamespaceLabels": {}
    }
---
# Source: kubeapps/charts/kubeapps/templates/frontend/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kubeapps-stack-frontend-config
  namespace: "default"
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    helm.sh/chart: kubeapps-13.1.1
    app.kubernetes.io/component: frontend
data:
  k8s-api-proxy.conf: |-
    # Deactivate buffering for log streaming
    proxy_buffering off;
    # Hide Www-Authenticate to prevent it triggering a basic auth prompt in
    # the browser with some clusters
    proxy_hide_header Www-Authenticate;

    # Keep the connection open with the API server even if idle (the default is 60 seconds)
    # Setting it to 1 hour which should be enough for our current use case of deploying/upgrading apps
    # If we enable other use-cases in the future we might need to bump this value
    # More info here https://github.com/vmware-tanzu/kubeapps/issues/766
    proxy_read_timeout 1h;
  default-ca.pem: <path:/devsecops/data/apps/kubeapps/devsecops-testing#impersonationProxyCaData>
  vhost.conf: |-
    # Retain the default nginx handling of requests without a "Connection" header
    map $http_upgrade $connection_upgrade {
      default upgrade;
      ''      close;
    }

    # Allow websocket connections
    proxy_set_header Upgrade    $http_upgrade;
    proxy_set_header Connection $connection_upgrade;

    server {
      listen 8080;
      large_client_header_buffers 4 32k;
      server_name _;

      location /healthz {
        access_log off;
        default_type text/plain;
        return 200 "healthy\n";
      }

      # Only proxy to k8s API endpoints if operators are enabled.

      location ~* /apis {
        rewrite ^ $request_uri; # pass the encoded url downstream as is,
        rewrite /apis/([^?]*) /$1 break;
        rewrite /apis / break;

        proxy_pass http://kubeapps-stack-internal-kubeappsapis:8080;
      }
      location / {
        # Add the Authorization header if exists
        add_header Authorization $http_authorization;
        proxy_pass http://kubeapps-stack-internal-dashboard:8080;
      }
    }
---
# Source: kubeapps/charts/kubeapps/templates/kubeappsapis/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kubeapps-stack-internal-kubeappsapis-configmap
  namespace: "default"
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    helm.sh/chart: kubeapps-13.1.1
data:
  plugins.conf: |-
    {
      "core": {
        "packages": {
          "v1alpha1": {
            "timeoutSeconds": 300,
            "versionsInSummary": {
              "major": 3,
              "minor": 3,
              "patch": 3
            }
          }
        }
      },
      "flux": {
        "packages": {
          "v1alpha1": {
            "defaultUpgradePolicy": "none",
            "noCrossNamespaceRefs": false
          }
        }
      },
      "helm": {
        "packages": {
          "v1alpha1": {
            "globalPackagingNamespace": ""
          }
        }
      },
      "kappController": {
        "packages": {
          "v1alpha1": {
            "defaultAllowDowngrades": false,
            "defaultUpgradePolicy": "none",
            "globalPackagingNamespace": "kapp-controller-packaging-global"
          }
        }
      },
      "resources": {
        "packages": {
          "v1alpha1": {
            "trustedNamespaces": {
              "headerName": "",
              "headerPattern": ""
            }
          }
        }
      }
    }
---
# Source: kubeapps/charts/kubeapps/templates/shared/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kubeapps-stack-clusters-config
  namespace: "default"
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    helm.sh/chart: kubeapps-13.1.1
data:
  clusters.conf: |-
    [
      {
        "apiServiceURL": "\u003cpath:/devsecops/data/apps/kubeapps/devsecops-testing#impersonationProxyApiServiceUrl\u003e",
        "certificateAuthorityData": "\u003cpath:/devsecops/data/apps/kubeapps/devsecops-testing#impersonationProxyCaData\u003e",
        "isKubeappsCluster": true,
        "name": "default",
        "pinnipedConfig": {
          "enabled": true
        }
      }
    ]
---
# Source: kubeapps/charts/pinniped/templates/concierge/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kubeapps-stack-pinniped-concierge
  namespace: "default"
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pinniped
    helm.sh/chart: pinniped-1.3.2
    app.kubernetes.io/part-of: pinniped
    app.kubernetes.io/component: concierge
data:
  pinniped.yaml: |-
    discovery:
      url: null
    api:
      servingCertificate:
        durationSeconds: 2592000
        renewBeforeSeconds: 2160000
    apiGroupSuffix: pinniped.dev
    aggregatedAPIServerPort: 10250
    impersonationProxyServerPort: 8444
    names:
      servingCertificateSecret: kubeapps-stack-pinniped-concierge-default-api-tls-serving-certi
      credentialIssuer: kubeapps-stack-pinniped-concierge
      apiService: kubeapps-stack-pinniped-concierge-default-api
      impersonationLoadBalancerService: kubeapps-stack-pinniped-concierge-impersonation-proxy-load-bala
      impersonationClusterIPService: kubeapps-stack-pinniped-concierge-impersonation-proxy-cluster-i
      impersonationTLSCertificateSecret: kubeapps-stack-pinniped-concierge-impersonation-proxy-tls-servi
      impersonationCACertificateSecret: kubeapps-stack-pinniped-concierge-impersonation-proxy-ca-certif
      impersonationSignerSecret: kubeapps-stack-pinniped-concierge-impersonation-proxy-signer-ca
      agentServiceAccount: kubeapps-stack-pinniped-concierge-kube-cert-agent-server
    labels: {"app":"pinniped-concierge","app.kubernetes.io/part-of":"pinniped", "app.kubernetes.io/component": "concierge", "app.kubernetes.io/instance": "kubeapps-stack"}
    kubeCertAgent:
      namePrefix: kubeapps-stack-pinniped-concierge-kube-cert-agent-
      image: docker.io/bitnami/pinniped:0.25.0-debian-11-r9
---
# Source: kubeapps/charts/dex/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kubeapps-stack-dex
  labels:
    helm.sh/chart: dex-0.15.3
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/version: "2.37.0"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["list", "create"]
---
# Source: kubeapps/charts/kubeapps/templates/apprepository/rbac.yaml
# The Kubeapps app repository controller can read and watch its own
# AppRepository resources cluster-wide. The read and write cluster-roles can
# also be bound to users in specific namespaces as required.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: "kubeapps:default:apprepositories-read"
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    helm.sh/chart: kubeapps-13.1.1
    app.kubernetes.io/component: apprepository
    rbac.authorization.k8s.io/aggregate-to-view: "true"
rules:
  - apiGroups:
      - kubeapps.com
    resources:
      - apprepositories
      - apprepositories/finalizers
    verbs:
      - get
      - list
      - watch
---
# Source: kubeapps/charts/kubeapps/templates/apprepository/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: "kubeapps:default:apprepositories-write"
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    helm.sh/chart: kubeapps-13.1.1
    app.kubernetes.io/component: apprepository
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
rules:
  - apiGroups:
      - kubeapps.com
    resources:
      - apprepositories
    verbs:
      - '*'
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - '*'
---
# Source: kubeapps/charts/kubeapps/templates/apprepository/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: "kubeapps:default:apprepositories-refresh"
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    helm.sh/chart: kubeapps-13.1.1
    app.kubernetes.io/component: apprepository
rules:
  - apiGroups:
      - kubeapps.com
    resources:
      - apprepositories
    verbs:
      - get
      - update
---
# Source: kubeapps/charts/kubeapps/templates/kubeappsapis/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: "kubeapps:default:kubeappsapis-ns-discovery"
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    helm.sh/chart: kubeapps-13.1.1
    app.kubernetes.io/component: kubeappsapis
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - list
---
# Source: kubeapps/charts/pinniped/templates/concierge/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kubeapps-stack-pinniped-concierge-default-aggregated-api-server
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pinniped
    helm.sh/chart: pinniped-1.3.2
    app.kubernetes.io/part-of: pinniped
    app.kubernetes.io/component: concierge
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - apiregistration.k8s.io
    resources:
      - apiservices
    verbs:
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - admissionregistration.k8s.io
    resources:
      - validatingwebhookconfigurations
      - mutatingwebhookconfigurations
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - flowcontrol.apiserver.k8s.io
    resources:
      - flowschemas
      - prioritylevelconfigurations
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - security.openshift.io
    resources:
      - securitycontextconstraints
    verbs:
      - use
    resourceNames:
      - nonroot
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - list
  - apiGroups:
      - config.concierge.pinniped.dev
    resources:
      - credentialissuers
    verbs:
      - get
      - list
      - watch
      - create
  - apiGroups:
      - config.concierge.pinniped.dev
    resources:
      - credentialissuers/status
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - authentication.concierge.pinniped.dev
    resources:
      - jwtauthenticators
      - webhookauthenticators
    verbs:
      - get
      - list
      - watch
---
# Source: kubeapps/charts/pinniped/templates/concierge/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kubeapps-stack-pinniped-concierge-default-impersonation-proxy
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pinniped
    helm.sh/chart: pinniped-1.3.2
    app.kubernetes.io/part-of: pinniped
    app.kubernetes.io/component: concierge
rules:
  - apiGroups:
      - ""
    resources:
      - users
      - groups
      - serviceaccounts
    verbs:
      - impersonate
  - apiGroups:
      - authentication.k8s.io
    resources:
      - '*'
    verbs:
      - impersonate
---
# Source: kubeapps/charts/pinniped/templates/concierge/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kubeapps-stack-pinniped-concierge-default-pre-authn-apis
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pinniped
    helm.sh/chart: pinniped-1.3.2
    app.kubernetes.io/part-of: pinniped
    app.kubernetes.io/component: concierge
rules:
  - apiGroups:
      - login.concierge.pinniped.dev
    resources:
      - tokencredentialrequests
    verbs:
      - create
      - list
  - apiGroups:
      - identity.concierge.pinniped.dev
    resources:
      - whoamirequests
    verbs:
      - create
      - list
---
# Source: kubeapps/charts/pinniped/templates/supervisor/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kubeapps-stack-pinniped-supervisor-default-aggregated-api-serve
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pinniped
    helm.sh/chart: pinniped-1.3.2
    app.kubernetes.io/part-of: pinniped
    app.kubernetes.io/component: supervisor
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - apiregistration.k8s.io
    resources:
      - apiservices
    verbs:
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - admissionregistration.k8s.io
    resources:
      - validatingwebhookconfigurations
      - mutatingwebhookconfigurations
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - flowcontrol.apiserver.k8s.io
    resources:
      - flowschemas
      - prioritylevelconfigurations
    verbs:
      - get
      - list
      - watch
---
# Source: kubeapps/charts/dex/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kubeapps-stack-dex-cluster
  labels:
    helm.sh/chart: dex-0.15.3
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/version: "2.37.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  kind: ClusterRole
  apiGroup: rbac.authorization.k8s.io
  name: kubeapps-stack-dex
subjects:
- kind: ServiceAccount
  namespace: default
  name: kubeapps-stack-dex
---
# Source: kubeapps/charts/kubeapps/templates/apprepository/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: "kubeapps:controller:default:apprepositories-read"
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    helm.sh/chart: kubeapps-13.1.1
    app.kubernetes.io/component: apprepository
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: "kubeapps:default:apprepositories-read"
subjects:
  - kind: ServiceAccount
    name: kubeapps-stack-internal-apprepository-controller
    namespace: default
---
# Source: kubeapps/charts/kubeapps/templates/kubeappsapis/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: "kubeapps:default:kubeappsapis-ns-discovery"
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    helm.sh/chart: kubeapps-13.1.1
    app.kubernetes.io/component: kubeappsapis
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: "kubeapps:default:kubeappsapis-ns-discovery"
subjects:
  - kind: ServiceAccount
    name: kubeapps-stack-internal-kubeappsapis
    namespace: default
---
# Source: kubeapps/charts/pinniped/templates/concierge/rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kubeapps-stack-pinniped-concierge-default-aggregated-api-server
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pinniped
    helm.sh/chart: pinniped-1.3.2
    app.kubernetes.io/part-of: pinniped
    app.kubernetes.io/component: concierge
subjects:
  - kind: ServiceAccount
    name: kubeapps-stack-pinniped-concierge
    namespace: "default"
roleRef:
  kind: ClusterRole
  name: kubeapps-stack-pinniped-concierge-default-aggregated-api-server
  apiGroup: rbac.authorization.k8s.io
---
# Source: kubeapps/charts/pinniped/templates/concierge/rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kubeapps-stack-pinniped-concierge-default-impersonation-proxy
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pinniped
    helm.sh/chart: pinniped-1.3.2
    app.kubernetes.io/part-of: pinniped
    app.kubernetes.io/component: concierge
subjects:
  - kind: ServiceAccount
    name: kubeapps-stack-pinniped-concierge-impersonation-proxy
    namespace: "default"
roleRef:
  kind: ClusterRole
  name: kubeapps-stack-pinniped-concierge-default-impersonation-proxy
  apiGroup: rbac.authorization.k8s.io
---
# Source: kubeapps/charts/pinniped/templates/concierge/rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kubeapps-stack-pinniped-concierge-default-pre-authn-apis
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pinniped
    helm.sh/chart: pinniped-1.3.2
    app.kubernetes.io/part-of: pinniped
    app.kubernetes.io/component: concierge
subjects:
  - kind: Group
    name: system:authenticated
    apiGroup: rbac.authorization.k8s.io
  - kind: Group
    name: system:unauthenticated
    apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: ClusterRole
  name: kubeapps-stack-pinniped-concierge-default-pre-authn-apis
  apiGroup: rbac.authorization.k8s.io
---
# Source: kubeapps/charts/pinniped/templates/concierge/rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kubeapps-stack-pinniped-concierge-default
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pinniped
    helm.sh/chart: pinniped-1.3.2
    app.kubernetes.io/part-of: pinniped
    app.kubernetes.io/component: concierge
subjects:
  - kind: ServiceAccount
    name: kubeapps-stack-pinniped-concierge
    namespace: "default"
roleRef:
  kind: ClusterRole
  name: system:auth-delegator
  apiGroup: rbac.authorization.k8s.io
---
# Source: kubeapps/charts/pinniped/templates/supervisor/rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kubeapps-stack-pinniped-supervisor-default
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pinniped
    helm.sh/chart: pinniped-1.3.2
    app.kubernetes.io/part-of: pinniped
    app.kubernetes.io/component: supervisor
subjects:
  - kind: ServiceAccount
    name: kubeapps-stack-pinniped-supervisor
    namespace: "default"
roleRef:
  kind: ClusterRole
  name: system:auth-delegator
  apiGroup: rbac.authorization.k8s.io
---
# Source: kubeapps/charts/pinniped/templates/supervisor/rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kubeapps-stack-pinniped-supervisor-default-aggregated-api-serve
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pinniped
    helm.sh/chart: pinniped-1.3.2
    app.kubernetes.io/part-of: pinniped
    app.kubernetes.io/component: supervisor
subjects:
  - kind: ServiceAccount
    name: kubeapps-stack-pinniped-supervisor
    namespace: "default"
roleRef:
  kind: ClusterRole
  name: kubeapps-stack-pinniped-supervisor-default-aggregated-api-serve
  apiGroup: rbac.authorization.k8s.io
---
# Source: kubeapps/templates/adminclusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kubeapps-admin
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: catenax-ng:argocdadmins
---
# Source: kubeapps/charts/dex/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kubeapps-stack-dex
  labels:
    helm.sh/chart: dex-0.15.3
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/version: "2.37.0"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups: ["dex.coreos.com"]
    resources: ["*"]
    verbs: ["*"]
---
# Source: kubeapps/charts/kubeapps/templates/apprepository/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kubeapps-stack-internal-apprepository-controller
  namespace: "default"
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    helm.sh/chart: kubeapps-13.1.1
    app.kubernetes.io/component: apprepository
rules:
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - batch
    resources:
      - cronjobs
    verbs:
      - create
      - get
      - list
      - update
      - watch
      - delete
  - apiGroups:
      - batch
    resources:
      - jobs
    verbs:
      - create
  - apiGroups:
      - kubeapps.com
    resources:
      - apprepositories
      - apprepositories/finalizers
    verbs:
      - get
      - list
      - update
      - watch
---
# Source: kubeapps/charts/kubeapps/templates/apprepository/rbac.yaml
# Define role, but no binding, so users can be bound to this role
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kubeapps-stack-repositories-read
  namespace: "default"
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    helm.sh/chart: kubeapps-13.1.1
    app.kubernetes.io/component: apprepository
rules:
  - apiGroups:
      - kubeapps.com
    resources:
      - apprepositories
    verbs:
      - list
      - get
---
# Source: kubeapps/charts/kubeapps/templates/apprepository/rbac.yaml
# Define role, but no binding, so users can be bound to this role
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kubeapps-stack-repositories-write
  namespace: "default"
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    helm.sh/chart: kubeapps-13.1.1
    app.kubernetes.io/component: apprepository
rules:
  - apiGroups:
      - kubeapps.com
    resources:
      - apprepositories
    verbs:
      - "*"
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - create
---
# Source: kubeapps/charts/pinniped/templates/concierge/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kubeapps-stack-pinniped-concierge-kube-cert-agent
  namespace: "default"
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pinniped
    helm.sh/chart: pinniped-1.3.2
    app.kubernetes.io/part-of: pinniped
    app.kubernetes.io/component: concierge
rules:
  - apiGroups:
      - policy
    resources:
      - podsecuritypolicies
    verbs:
      - use
---
# Source: kubeapps/charts/pinniped/templates/concierge/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kubeapps-stack-pinniped-concierge-aggregated-api-server
  namespace: "default"
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pinniped
    helm.sh/chart: pinniped-1.3.2
    app.kubernetes.io/part-of: pinniped
    app.kubernetes.io/component: concierge
rules:
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - create
      - get
      - list
      - patch
      - update
      - watch
      - delete
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - create
      - get
      - list
      - patch
      - update
      - watch
      - delete
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - pods/exec
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - delete
  - apiGroups:
      - apps
    resources:
      - deployments
    verbs:
      - create
      - get
      - list
      - patch
      - update
      - watch
      - delete
  - apiGroups:
      - apps
    resources:
      - replicasets
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - list
      - get
      - watch
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    verbs:
      - create
      - get
      - update
---
# Source: kubeapps/charts/pinniped/templates/concierge/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kubeapps-stack-pinniped-concierge-default-kube-system-pod-read
  namespace: kube-system
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pinniped
    helm.sh/chart: pinniped-1.3.2
    app.kubernetes.io/part-of: pinniped
    app.kubernetes.io/component: concierge
rules:
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - get
      - list
      - watch
---
# Source: kubeapps/charts/pinniped/templates/concierge/rbac.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kubeapps-stack-pinniped-concierge-default-cluster-info-lister-w
  namespace: kube-public
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pinniped
    helm.sh/chart: pinniped-1.3.2
    app.kubernetes.io/part-of: pinniped
    app.kubernetes.io/component: concierge
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - list
      - watch
---
# Source: kubeapps/charts/pinniped/templates/supervisor/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kubeapps-stack-pinniped-supervisor
  namespace: "default"
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pinniped
    helm.sh/chart: pinniped-1.3.2
    app.kubernetes.io/part-of: pinniped
    app.kubernetes.io/component: supervisor
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - create
      - get
      - list
      - patch
      - update
      - watch
      - delete
  - apiGroups:
      - config.supervisor.pinniped.dev
    resources:
      - federationdomains
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - config.supervisor.pinniped.dev
    resources:
      - federationdomains/status
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - config.supervisor.pinniped.dev
    resources:
      - oidcclients
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - config.supervisor.pinniped.dev
    resources:
      - oidcclients/status
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - idp.supervisor.pinniped.dev
    resources:
      - oidcidentityproviders
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - idp.supervisor.pinniped.dev
    resources:
      - oidcidentityproviders/status
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - idp.supervisor.pinniped.dev
    resources:
      - ldapidentityproviders
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - idp.supervisor.pinniped.dev
    resources:
      - ldapidentityproviders/status
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - idp.supervisor.pinniped.dev
    resources:
      - activedirectoryidentityproviders
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - idp.supervisor.pinniped.dev
    resources:
      - activedirectoryidentityproviders/status
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - get
  - apiGroups:
      - apps
    resources:
      - replicasets
      - deployments
    verbs:
      - get
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    verbs:
      - create
      - get
      - update
---
# Source: kubeapps/charts/dex/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kubeapps-stack-dex
  labels:
    helm.sh/chart: dex-0.15.3
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/version: "2.37.0"
    app.kubernetes.io/managed-by: Helm
roleRef:
  kind: Role
  apiGroup: rbac.authorization.k8s.io
  name: kubeapps-stack-dex  
subjects:
- kind: ServiceAccount
  namespace: default
  name: kubeapps-stack-dex
---
# Source: kubeapps/charts/kubeapps/templates/apprepository/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kubeapps-stack-internal-apprepository-controller
  namespace: "default"
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    helm.sh/chart: kubeapps-13.1.1
    app.kubernetes.io/component: apprepository
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kubeapps-stack-internal-apprepository-controller
subjects:
  - kind: ServiceAccount
    name: kubeapps-stack-internal-apprepository-controller
    namespace: default
---
# Source: kubeapps/charts/kubeapps/templates/apprepository/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: "kubeapps:default:global-repos-read"
  namespace: "default"
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    helm.sh/chart: kubeapps-13.1.1
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: "kubeapps:default:apprepositories-read"
subjects:
  - kind: Group
    name: system:authenticated
---
# Source: kubeapps/charts/pinniped/templates/concierge/rbac.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kubeapps-stack-pinniped-concierge-kube-cert-agent
  namespace: "default"
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pinniped
    helm.sh/chart: pinniped-1.3.2
    app.kubernetes.io/part-of: pinniped
    app.kubernetes.io/component: concierge
subjects:
  - kind: ServiceAccount
    name: kubeapps-stack-pinniped-concierge-kube-cert-agent-server
    namespace: "default"
roleRef:
  kind: Role
  name: kubeapps-stack-pinniped-concierge-kube-cert-agent
  apiGroup: rbac.authorization.k8s.io
---
# Source: kubeapps/charts/pinniped/templates/concierge/rbac.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kubeapps-stack-pinniped-concierge-aggregated-api-server
  namespace: "default"
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pinniped
    helm.sh/chart: pinniped-1.3.2
    app.kubernetes.io/part-of: pinniped
    app.kubernetes.io/component: concierge
subjects:
  - kind: ServiceAccount
    name: kubeapps-stack-pinniped-concierge
    namespace: "default"
roleRef:
  kind: Role
  name: kubeapps-stack-pinniped-concierge-aggregated-api-server
  apiGroup: rbac.authorization.k8s.io
---
# Source: kubeapps/charts/pinniped/templates/concierge/rbac.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kubeapps-stack-pinniped-concierge-default-kube-system-pod-read
  namespace: kube-system
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pinniped
    helm.sh/chart: pinniped-1.3.2
    app.kubernetes.io/part-of: pinniped
    app.kubernetes.io/component: concierge
subjects:
  - kind: ServiceAccount
    name: kubeapps-stack-pinniped-concierge
    namespace: "default"
roleRef:
  kind: Role
  name: kubeapps-stack-pinniped-concierge-default-kube-system-pod-read
  apiGroup: rbac.authorization.k8s.io
---
# Source: kubeapps/charts/pinniped/templates/concierge/rbac.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kubeapps-stack-pinniped-concierge-default-extension-apiserver-a
  namespace: kube-system
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pinniped
    helm.sh/chart: pinniped-1.3.2
    app.kubernetes.io/part-of: pinniped
    app.kubernetes.io/component: concierge
subjects:
  - kind: ServiceAccount
    name: kubeapps-stack-pinniped-concierge
    namespace: "default"
roleRef:
  kind: Role
  name: extension-apiserver-authentication-reader
  apiGroup: rbac.authorization.k8s.io
---
# Source: kubeapps/charts/pinniped/templates/concierge/rbac.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kubeapps-stack-pinniped-concierge-default-cluster-info-lister-w
  namespace: kube-public
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pinniped
    helm.sh/chart: pinniped-1.3.2
    app.kubernetes.io/part-of: pinniped
    app.kubernetes.io/component: concierge
subjects:
  - kind: ServiceAccount
    name: kubeapps-stack-pinniped-concierge
    namespace: "default"
roleRef:
  kind: Role
  name: kubeapps-stack-pinniped-concierge-default-cluster-info-lister-w
  apiGroup: rbac.authorization.k8s.io
---
# Source: kubeapps/charts/pinniped/templates/supervisor/rbac.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kubeapps-stack-pinniped-supervisor
  namespace: "default"
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pinniped
    helm.sh/chart: pinniped-1.3.2
    app.kubernetes.io/part-of: pinniped
    app.kubernetes.io/component: supervisor
subjects:
  - kind: ServiceAccount
    name: kubeapps-stack-pinniped-supervisor
    namespace: "default"
roleRef:
  kind: Role
  name: kubeapps-stack-pinniped-supervisor
  apiGroup: rbac.authorization.k8s.io
---
# Source: kubeapps/charts/pinniped/templates/supervisor/rbac.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kubeapps-stack-pinniped-supervisor-default-extension-apiserver
  namespace: kube-system
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pinniped
    helm.sh/chart: pinniped-1.3.2
    app.kubernetes.io/part-of: pinniped
    app.kubernetes.io/component: supervisor
subjects:
  - kind: ServiceAccount
    name: kubeapps-stack-pinniped-supervisor
    namespace: "default"
roleRef:
  kind: Role
  name: extension-apiserver-authentication-reader
  apiGroup: rbac.authorization.k8s.io
---
# Source: kubeapps/charts/dex/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kubeapps-stack-dex
  labels:
    helm.sh/chart: dex-0.15.3
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/version: "2.37.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 5556
      targetPort: http
      protocol: TCP
      appProtocol: http
    - name: telemetry
      port: 5558
      targetPort: telemetry
      protocol: TCP
      appProtocol: http
  selector:
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: kubeapps-stack
---
# Source: kubeapps/charts/kubeapps/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: kubeapps-stack-postgresql-hl
  namespace: "default"
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.10.0
    app.kubernetes.io/component: primary
  annotations:
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: kubeapps/charts/kubeapps/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: kubeapps-stack-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.10.0
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: kubeapps/charts/kubeapps/templates/dashboard/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kubeapps-stack-internal-dashboard
  namespace: "default"
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    helm.sh/chart: kubeapps-13.1.1
    app.kubernetes.io/component: dashboard
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/name: kubeapps
    app.kubernetes.io/component: dashboard
---
# Source: kubeapps/charts/kubeapps/templates/frontend/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kubeapps-stack
  namespace: "default"
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    helm.sh/chart: kubeapps-13.1.1
    app.kubernetes.io/component: frontend
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: proxy
      nodePort: null
  selector:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/name: kubeapps
    app.kubernetes.io/component: frontend
---
# Source: kubeapps/charts/kubeapps/templates/frontend/service.yaml
# Include an additional ClusterIP service for the pinniped-proxy as some configurations
# require the normal frontend service to use NodePort.
apiVersion: v1
kind: Service
metadata:
  name: kubeapps-stack-internal-pinniped-proxy
  namespace: "default"
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    helm.sh/chart: kubeapps-13.1.1
    app.kubernetes.io/component: frontend
spec:
  type: ClusterIP
  ports:
    - port: 3333
      targetPort: pinniped-proxy
      protocol: TCP
      name: pinniped-proxy
  selector:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/name: kubeapps
    app.kubernetes.io/component: frontend
---
# Source: kubeapps/charts/kubeapps/templates/kubeappsapis/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kubeapps-stack-internal-kubeappsapis
  namespace: "default"
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    helm.sh/chart: kubeapps-13.1.1
    app.kubernetes.io/component: kubeappsapis
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: grpc-http
      protocol: TCP
      name: grpc-http
  selector:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/name: kubeapps
    app.kubernetes.io/component: kubeappsapis
---
# Source: kubeapps/charts/pinniped/templates/concierge/service-api.yaml
apiVersion: v1
kind: Service
metadata:
  name: kubeapps-stack-pinniped-concierge-default-api
  namespace: "default"
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pinniped
    helm.sh/chart: pinniped-1.3.2
    app.kubernetes.io/part-of: pinniped
    app.kubernetes.io/component: concierge
spec:
  type: ClusterIP
  ports:
    - protocol: TCP
      port: 443
      targetPort: https-api
  selector:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/name: pinniped
    app.kubernetes.io/component: concierge
---
# Source: kubeapps/charts/pinniped/templates/concierge/service-proxy.yaml
apiVersion: v1
kind: Service
metadata:
  name: kubeapps-stack-pinniped-concierge
  namespace: "default"
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pinniped
    helm.sh/chart: pinniped-1.3.2
    app.kubernetes.io/part-of: pinniped
    app.kubernetes.io/component: concierge
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: https
      port: 443
      protocol: TCP
      targetPort: https-proxy
      nodePort: null
  selector:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/name: pinniped
    app.kubernetes.io/component: concierge
---
# Source: kubeapps/charts/dex/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubeapps-stack-dex
  labels:
    helm.sh/chart: dex-0.15.3
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/version: "2.37.0"
    app.kubernetes.io/managed-by: Helm
    
  
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: dex
      app.kubernetes.io/instance: kubeapps-stack
  template:
    metadata:
      annotations:
      
        checksum/config: 50218301bc39c2a430b4481271f3b9ebd0b6b3e243b222a05a23e02605d956c1
      labels:
        app.kubernetes.io/name: dex
        app.kubernetes.io/instance: kubeapps-stack
    spec:
      serviceAccountName: kubeapps-stack-dex
      securityContext:
        {}
      containers:
        - name: dex
          securityContext:
            {}
          image: "ghcr.io/dexidp/dex:v2.37.0"
          imagePullPolicy: IfNotPresent
          args:
            - dex
            - serve
            - --web-http-addr
            - 0.0.0.0:5556
            - --telemetry-addr
            - 0.0.0.0:5558
            - /etc/dex/config.yaml
          env:
          ports:
            - name: http
              containerPort: 5556
              protocol: TCP
            - name: telemetry
              containerPort: 5558
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz/live
              port: telemetry
          readinessProbe:
            httpGet:
              path: /healthz/ready
              port: telemetry
          resources:
            {}
          volumeMounts:
            - name: config
              mountPath: /etc/dex
              readOnly: true
      volumes:
        - name: config
          secret:
            secretName: kubeapps-stack-dex
---
# Source: kubeapps/charts/kubeapps/templates/apprepository/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubeapps-stack-internal-apprepository-controller
  namespace: "default"
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    helm.sh/chart: kubeapps-13.1.1
    app.kubernetes.io/component: apprepository
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: kubeapps-stack
      app.kubernetes.io/name: kubeapps
      app.kubernetes.io/component: apprepository
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: kubeapps-stack
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: kubeapps
        helm.sh/chart: kubeapps-13.1.1
        app.kubernetes.io/component: apprepository
    spec:      
      serviceAccountName: kubeapps-stack-internal-apprepository-controller
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: kubeapps-stack
                    app.kubernetes.io/name: kubeapps
                    app.kubernetes.io/component: apprepository
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      containers:
        - name: controller
          image: docker.io/bitnami/kubeapps-apprepository-controller:2.8.0-debian-11-r20
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          command:
            - /apprepository-controller
          args:
            - --user-agent-comment=kubeapps/2.8.0
            - --repo-sync-image=$(REPO_SYNC_IMAGE)
            - --repo-sync-cmd=/asset-syncer
            - --namespace=default
            - --global-repos-namespace=default
            - --database-secret-name=kubeapps-stack-postgresql
            - --database-secret-key=postgres-password
            - --database-url=kubeapps-stack-postgresql:5432
            - --database-user=postgres
            - --database-name=assets
            - --repos-per-namespace=true
          env:
            - name: REPO_SYNC_IMAGE
              value: docker.io/bitnami/kubeapps-asset-syncer:2.8.0-debian-11-r20
          envFrom:
          resources:
            limits:
              cpu: 250m
              memory: 128Mi
            requests:
              cpu: 25m
              memory: 32Mi
---
# Source: kubeapps/charts/kubeapps/templates/dashboard/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubeapps-stack-internal-dashboard
  namespace: "default"
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    helm.sh/chart: kubeapps-13.1.1
    app.kubernetes.io/component: dashboard
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: kubeapps-stack
      app.kubernetes.io/name: kubeapps
      app.kubernetes.io/component: dashboard
  template:
    metadata:
      annotations:
        checksum/config: 1656595ae308bf4f803da248720605cea62c65c539a3d39299d928e431991a2e
      labels:
        app.kubernetes.io/instance: kubeapps-stack
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: kubeapps
        helm.sh/chart: kubeapps-13.1.1
        app.kubernetes.io/component: dashboard
    spec:      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: kubeapps-stack
                    app.kubernetes.io/name: kubeapps
                    app.kubernetes.io/component: dashboard
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      containers:
        - name: dashboard
          image: docker.io/bitnami/kubeapps-dashboard:2.8.0-debian-11-r50
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
          envFrom:
          ports:
            - name: http
              containerPort: 8080
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /
              port: http
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 0
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /
              port: http
          startupProbe:
            failureThreshold: 6
            initialDelaySeconds: 0
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: http
          resources:
            limits:
              cpu: 250m
              memory: 128Mi
            requests:
              cpu: 25m
              memory: 32Mi
          volumeMounts:
            - name: vhost
              mountPath: /opt/bitnami/nginx/conf/server_blocks
            - name: config
              mountPath: /app/config.json
              subPath: config.json
            - mountPath: /app/custom-css
              name: custom-css
            - mountPath: /app/custom-locale
              name: custom-locale
            - mountPath: /app/custom-components
              name: custom-components
      volumes:
        - name: vhost
          configMap:
            name: kubeapps-stack-internal-dashboard-config
            items:
              - key: vhost.conf
                path: vhost.conf
        - name: config
          configMap:
            name: kubeapps-stack-internal-dashboard-config
            items:
              - key: config.json
                path: config.json
        - name: custom-css
          configMap:
            name: kubeapps-stack-internal-dashboard-config
            items:
              - key: custom_style.css
                path: custom_style.css
        - name: custom-locale
          configMap:
            name: kubeapps-stack-internal-dashboard-config
            items:
              - key: custom_locale.json
                path: custom_locale.json
        - name: custom-components
          configMap:
            name: kubeapps-stack-internal-dashboard-config
            items:
              - key: custom_components.js
                path: custom_components.js
---
# Source: kubeapps/charts/kubeapps/templates/frontend/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubeapps-stack
  namespace: "default"
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    helm.sh/chart: kubeapps-13.1.1
    app.kubernetes.io/component: frontend
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: kubeapps-stack
      app.kubernetes.io/name: kubeapps
      app.kubernetes.io/component: frontend
  template:
    metadata:
      annotations:
        checksum/config: 896dd1f35aa9bee9b7ad4f9ab2c7d50b039b1701f4433c13151f8f87ec0642ee
      labels:
        app.kubernetes.io/instance: kubeapps-stack
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: kubeapps
        helm.sh/chart: kubeapps-13.1.1
        app.kubernetes.io/component: frontend
    spec:      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: kubeapps-stack
                    app.kubernetes.io/name: kubeapps
                    app.kubernetes.io/component: frontend
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      containers:
        - name: nginx
          image: docker.io/bitnami/nginx:1.25.2-debian-11-r8
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
          envFrom:
          ports:
            - name: http
              containerPort: 8080
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /healthz
              port: http
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 0
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /
              port: http
          resources:
            limits:
              cpu: 250m
              memory: 128Mi
            requests:
              cpu: 25m
              memory: 32Mi
          volumeMounts:
            - name: vhost
              mountPath: /opt/bitnami/nginx/conf/server_blocks
        - name: auth-proxy
          image: docker.io/bitnami/oauth2-proxy:7.4.0-debian-11-r281
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          args:
            - --provider=oidc
            - --upstream=http://localhost:8080/
            - --http-address=0.0.0.0:3000
            - --email-domain=*
            - --pass-basic-auth=false
            - --pass-access-token=true
            - --pass-authorization-header=true
            - --skip-auth-regex=^\/config\.json$
            - --skip-auth-regex=^\/site\.webmanifest$
            - --skip-auth-regex=^\/custom_style\.css$
            - --skip-auth-regex=^\/clr-ui.min\.css$
            - --skip-auth-regex=^\/clr-ui-dark.min\.css$
            - --skip-auth-regex=^\/custom_locale\.json$
            - --skip-auth-regex=^\/favicon.*\.png$
            - --skip-auth-regex=^\/favicon.*\.ico$
            - --skip-auth-regex=^\/android-chrome-.*\.png$
            - --skip-auth-regex=^\/static\/
            - --skip-auth-regex=^\/apis/core/plugins/v1alpha1/configured-plugins$
            - --skip-auth-regex=^\/apis/kubeappsapis.core.plugins.v1alpha1.PluginsService/GetConfiguredPlugins$
            - --skip-auth-regex=^\/$
            - --scope=openid email groups user:email
            - --cookie-refresh=2m
            - --cookie-refresh=0
            - --ssl-insecure-skip-verify
            - --cookie-secure=true
            - --oidc-issuer-url=https://dex-kubeapps.devsecops-testing.demo.catena-x.net
          env:
            - name: OAUTH2_PROXY_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: kubeapps-stack-oauth2
                  key: clientID
            - name: OAUTH2_PROXY_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: kubeapps-stack-oauth2
                  key: clientSecret
            - name: OAUTH2_PROXY_COOKIE_SECRET
              valueFrom:
                secretKeyRef:
                  name: kubeapps-stack-oauth2
                  key: cookieSecret
          envFrom:
          ports:
            - name: proxy
              containerPort: 3000
          resources:
            limits:
              cpu: 250m
              memory: 128Mi
            requests:
              cpu: 25m
              memory: 32Mi
        - name: pinniped-proxy
          image: docker.io/bitnami/kubeapps-pinniped-proxy:2.8.0-debian-11-r49
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          command:
            - pinniped-proxy
          env:
            - name: DEFAULT_PINNIPED_NAMESPACE
              value: "kubeapps"
            - name: DEFAULT_PINNIPED_AUTHENTICATOR_TYPE
              value: "JWTAuthenticator"
            - name: DEFAULT_PINNIPED_AUTHENTICATOR_NAME
              value: "jwt-authenticator"
            - name: DEFAULT_PINNIPED_API_SUFFIX
              value: "pinniped.dev"
            - name: RUST_LOG
              # Use info,pinniped_proxy::pinniped=debug for module control.
              value: info
          envFrom:
          ports:
            - name: pinniped-proxy
              containerPort: 3333
          resources:
            limits:
              cpu: 250m
              memory: 128Mi
            requests:
              cpu: 25m
              memory: 32Mi
          volumeMounts:
      volumes:
        - name: vhost
          configMap:
            name: kubeapps-stack-frontend-config
---
# Source: kubeapps/charts/kubeapps/templates/kubeappsapis/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubeapps-stack-internal-kubeappsapis
  namespace: "default"
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    helm.sh/chart: kubeapps-13.1.1
    app.kubernetes.io/component: kubeappsapis
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: kubeapps-stack
      app.kubernetes.io/name: kubeapps
      app.kubernetes.io/component: kubeappsapis
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: kubeapps-stack
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: kubeapps
        helm.sh/chart: kubeapps-13.1.1
        app.kubernetes.io/component: kubeappsapis
    spec:      
      serviceAccountName: kubeapps-stack-internal-kubeappsapis
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: kubeapps-stack
                    app.kubernetes.io/name: kubeapps
                    app.kubernetes.io/component: kubeappsapis
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      # Increase termination timeout to let remaining operations to finish before ending the pods
      # This is because new releases/upgrades/deletions are synchronous operations
      terminationGracePeriodSeconds: 300
      containers:
        - name: kubeappsapis
          image: docker.io/bitnami/kubeapps-apis:2.8.0-debian-11-r49
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          command:
            - /kubeapps-apis
          args:
            - --plugin-dir
            - /plugins/helm-packages
            - --plugin-dir
            - /plugins/resources
            - --clusters-config-path=/config/clusters.conf
            - --plugin-config-path=/config/kubeapps-apis/plugins.conf
            - --pinniped-proxy-url=http://kubeapps-stack-internal-pinniped-proxy.default:3333
            - --global-repos-namespace=default
            - --kube-api-qps=50.0
            - --kube-api-burst=100
          env:
            - name: GOGC
              value: "50" # default is 100. 50 means increasing x2 the frequency of GC
            - name: PORT
              value: "50051"
            # TODO(agamez): pass this configuration using a separated config file
            # These env vars are currently (and temporarily) required by the 'helm' plugin
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: ASSET_SYNCER_DB_URL
              value: kubeapps-stack-postgresql-hl:5432
            - name: ASSET_SYNCER_DB_NAME
              value: "assets"
            - name: ASSET_SYNCER_DB_USERNAME
              value: "postgres"
            - name: ASSET_SYNCER_DB_USERPASSWORD
              valueFrom:
                secretKeyRef:
                  key: postgres-password
                  name: kubeapps-stack-postgresql
          envFrom:
          ports:
            - name: grpc-http
              containerPort: 50051
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command: ["grpc_health_probe", "-addr=:50051"]
            initialDelaySeconds: 10
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 0
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command: ["grpc_health_probe", "-addr=:50051"]
            initialDelaySeconds: 5
          resources:
            limits:
              cpu: 250m
              memory: 256Mi
            requests:
              cpu: 25m
              memory: 32Mi
          volumeMounts:
            - name: clusters-config
              mountPath: /config
            - name: ca-certs
              mountPath: /etc/additional-clusters-cafiles
            - name: plugins-config
              mountPath: /config/kubeapps-apis
      volumes:
        - name: clusters-config
          configMap:
            name: kubeapps-stack-clusters-config
        - name: ca-certs
          emptyDir: {}
        - name: plugins-config
          configMap:
            name: kubeapps-stack-internal-kubeappsapis-configmap
---
# Source: kubeapps/charts/pinniped/templates/concierge/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubeapps-stack-pinniped-concierge
  namespace: "default"
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pinniped
    helm.sh/chart: pinniped-1.3.2
    app.kubernetes.io/part-of: pinniped
    app.kubernetes.io/component: concierge
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: kubeapps-stack
      app.kubernetes.io/name: pinniped
      app.kubernetes.io/component: concierge
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/instance: kubeapps-stack
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: pinniped
        helm.sh/chart: pinniped-1.3.2
        app: pinniped-concierge
        app.kubernetes.io/component: concierge
    spec:
      serviceAccountName: kubeapps-stack-pinniped-concierge
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: kubeapps-stack
                    app.kubernetes.io/name: pinniped
                    app.kubernetes.io/component: concierge
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      initContainers:
      containers:
        - name: concierge
          image: docker.io/bitnami/pinniped:0.25.0-debian-11-r9
          imagePullPolicy: IfNotPresent
          securityContext:
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1001
          command:
            - pinniped-concierge
          args:
            - --config=/bitnami/pinniped/conf/pinniped.yaml
            - --downward-api-path=/etc/podinfo
          env:
          envFrom:
          resources:
            limits: {}
            requests: {}
          ports:
            - name: https-proxy
              containerPort: 8444
            - name: https-api
              containerPort: 10250
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /healthz
              port: https-api
              scheme: HTTPS
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /healthz
              port: https-api
              scheme: HTTPS
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: config-volume
              mountPath: /bitnami/pinniped/conf
              readOnly: true
            - name: podinfo
              mountPath: /etc/podinfo
              readOnly: true
            - name: impersonation-proxy
              # This mount path is hardcoded in the pinniped source code
              mountPath: /var/run/secrets/impersonation-proxy.concierge.pinniped.dev/serviceaccount
              readOnly: true
      volumes:
        - name: tmp
          emptyDir:
            medium: Memory
            sizeLimit: 100Mi
        - name: config-volume
          configMap:
            name: kubeapps-stack-pinniped-concierge
        - name: impersonation-proxy
          secret:
            secretName: kubeapps-stack-pinniped-concierge-impersonation-proxy
            items:
              - key: token
                path: token
        - name: podinfo
          downwardAPI:
            items:
              - path: labels
                fieldRef:
                  fieldPath: metadata.labels
              - path: name
                fieldRef:
                  fieldPath: metadata.name
              - path: namespace
                fieldRef:
                  fieldPath: metadata.namespace
---
# Source: kubeapps/charts/kubeapps/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kubeapps-stack-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.10.0
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: kubeapps-stack-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: kubeapps-stack
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: kubeapps-stack-postgresql
      labels:
        app.kubernetes.io/instance: kubeapps-stack
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-12.10.0
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: kubeapps-stack
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:15.4.0-debian-11-r10
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: kubeapps-stack-postgresql
                  key: postgres-password
            - name: POSTGRES_DATABASE
              value: "assets"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -d "dbname=assets" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "postgres" -d "dbname=assets" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
        - name: data
          emptyDir: {}
---
# Source: kubeapps/charts/dex/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: kubeapps-stack-dex
  labels:
    helm.sh/chart: dex-0.15.3
    app.kubernetes.io/name: dex
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/version: "2.37.0"
    app.kubernetes.io/managed-by: Helm
spec:
  tls:
    - hosts:
        - "dex-kubeapps.devsecops-testing.demo.catena-x.net"
      secretName: tls-secret
  rules:
    - host: "dex-kubeapps.devsecops-testing.demo.catena-x.net"
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: kubeapps-stack-dex
                port:
                  number: 5556
---
# Source: kubeapps/charts/kubeapps/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: kubeapps-stack
  namespace: "default"
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    helm.sh/chart: kubeapps-13.1.1
  annotations:
    nginx.ingress.kubernetes.io/proxy-buffer-size: 10k
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
spec:
  rules:
    - host: kubeapps.devsecops-testing.demo.catena-x.net
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: kubeapps-stack
                port:
                  name: http
  tls:
    - hosts:
      - kubeapps.devsecops-testing.demo.catena-x.net
      secretName: tls-secret
---
# Source: kubeapps/charts/pinniped/templates/concierge/apiservice-identity.yaml
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1alpha1.identity.concierge.pinniped.dev
  namespace: "default"
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pinniped
    helm.sh/chart: pinniped-1.3.2
    app.kubernetes.io/part-of: pinniped
    app.kubernetes.io/component: concierge
spec:
  version: v1alpha1
  group: identity.concierge.pinniped.dev
  groupPriorityMinimum: 9900
  versionPriority: 15
  service:
    name: kubeapps-stack-pinniped-concierge-default-api
    namespace: default
    port: 443
---
# Source: kubeapps/charts/pinniped/templates/concierge/apiservice-login.yaml
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1alpha1.login.concierge.pinniped.dev
  namespace: "default"
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pinniped
    helm.sh/chart: pinniped-1.3.2
    app.kubernetes.io/part-of: pinniped
    app.kubernetes.io/component: concierge
spec:
  version: v1alpha1
  group: login.concierge.pinniped.dev
  groupPriorityMinimum: 9900
  versionPriority: 15
  service:
    name: kubeapps-stack-pinniped-concierge-default-api
    namespace: default
    port: 443
---
# Source: kubeapps/charts/kubeapps/templates/apprepository/apprepositories.yaml
apiVersion: kubeapps.com/v1alpha1
kind: AppRepository
metadata:
  name: bitnami
  namespace: "default"
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubeapps
    helm.sh/chart: kubeapps-13.1.1
spec:
  type: helm
  url: https://charts.bitnami.com/bitnami
  syncJobPodTemplate:
    spec:
      securityContext:
        runAsUser: 1001
---
# Source: kubeapps/charts/pinniped/templates/concierge/credential-issuer.yaml
apiVersion: config.concierge.pinniped.dev/v1alpha1
kind: CredentialIssuer
metadata:
  name: kubeapps-stack-pinniped-concierge
  namespace: "default"
  labels:
    app.kubernetes.io/instance: kubeapps-stack
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pinniped
    helm.sh/chart: pinniped-1.3.2
    app.kubernetes.io/part-of: pinniped
    app.kubernetes.io/component: concierge
spec:
  impersonationProxy:
    mode: auto
    service:
      type: ClusterIP
---
# Source: kubeapps/templates/jwtauthenticator.yaml
apiVersion: authentication.concierge.pinniped.dev/v1alpha1
kind: JWTAuthenticator
metadata:
  name: jwt-authenticator
spec:
  issuer: https://dex-kubeapps.devsecops-testing.demo.catena-x.net
  audience: kubeapps
  claims:
    username: email
    groups: groups
    tls:
      certificateAuthorityData:
